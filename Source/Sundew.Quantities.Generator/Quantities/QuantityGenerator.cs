// --------------------------------------------------------------------------------------------------------------------
// <copyright file="QuantityGenerator.cs" company="Hukano">
// Copyright (c) Hukano. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace Sundew.Quantities.Generator.Quantities;

using System.Collections.Generic;
using Sundew.Generator;
using Sundew.Generator.Code;
using Sundew.Generator.Code.CSharp;
using Sundew.Generator.Core;

public class QuantityGenerator : IGenerator<ICodeSetup, ICodeGeneratorSetup, IProject, IQuantityModel, ICodeRun, ITextOutput>
{
    public IReadOnlyList<ICodeRun> Prepare(ICodeSetup codeSetup, ICodeGeneratorSetup codeGeneratorSetup, IProject target, IQuantityModel model, string modelOrigin)
    {
        return new[]
        {
            new CodeRun(model.Name, model.Name + target.FileSuffix, codeGeneratorSetup.TargetNamespace ?? codeSetup.TargetNamespace)
        };
    }

    public ITextOutput Generate(ICodeSetup codeSetup, ICodeGeneratorSetup codeGeneratorSetup, IProject target, IQuantityModel model, ICodeRun run, long index)
    {
        return new TextOutput(
            $@"
// --------------------------------------------------------------------------------------------------------------------
// <copyright file=""{run.FileName}"" company=""Hukano"">
// Copyright (c) Hukano. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

// <auto-generated />
namespace {NamespaceHelper.CombineNamespaces(target.RootNamespace, run.Namespace)}
{{
{UsingsHelper.GetUsings(codeSetup.UseGlobalUsings || codeGeneratorSetup.UseGlobalUsings, 4, codeSetup.Usings, codeGeneratorSetup.Usings)}

    [GeneratedCode(""{this.GetType().FullName}"", ""{this.GetType().Assembly.GetName().Version}"")]
    public partial struct {model.Name} : IQuantity<{model.Name}, {model.Name}UnitSelector>
    {{
        private readonly double value;

{ConstructorsHelper.GetConstructors(model)}

        /// <summary>
        /// Gets the value.
        /// </summary>
        /// <value>
        /// The value.
        /// </value>
        double IQuantity.Value => this.value;

        /// <summary>
        /// Gets the unit.
        /// </summary>
        /// <value>
        /// The unit.
        /// </value>
        public IUnit Unit {{ get; }}

{StandardOperationsHelper.GetStandardOperations(model)}

{ConversionOperationsHelper.GetConversionOperations(model)}

{EqualityOperationsHelper.GetEqualityOperations(model)}

{FormattingOperationsHelper.GetToStringOperations(model)}

        /// <summary>
        /// Creates the quantity.
        /// </summary>
        /// <param name=""value"">The quantity value.</param>
        /// <param name=""unit"">The quantity unit.</param>
        /// <returns>
        /// A <see cref=""{model.Name}"" />.
        /// </returns>
        public {model.Name} CreateQuantity(double value, IUnit unit)
        {{
            return new {model.Name}(value, unit);
        }}

        /// <summary>
        /// Gets the result.
        /// </summary>
        /// <returns>
        /// An <see cref=""IQuantity"" />.
        /// </returns>
        IQuantity IDeferredQuantity.GetResult()
        {{
            return this;
        }}

        /// <summary>
        /// Creates the unit selector.
        /// </summary>
        /// <returns>
        /// A unit selector.
        /// </returns>
        {model.Name}UnitSelector IQuantity<{model.Name}, {model.Name}UnitSelector>.CreateUnitSelector()
        {{
            return new {model.Name}UnitSelector();
        }}
    }}
}}
");
    }
}